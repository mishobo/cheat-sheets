
FUNCTION number_get_next.
*"----------------------------------------------------------------------
*"*"Lokale Schnittstelle:
*"  IMPORTING
*"     VALUE(NR_RANGE_NR) LIKE  INRI-NRRANGENR
*"     VALUE(OBJECT) LIKE  INRI-OBJECT
*"     VALUE(QUANTITY) LIKE  INRI-QUANTITY DEFAULT '1'
*"     VALUE(SUBOBJECT) DEFAULT SPACE
*"     VALUE(TOYEAR) LIKE  INRI-TOYEAR DEFAULT '0000'
*"     VALUE(IGNORE_BUFFER) DEFAULT SPACE
*"  EXPORTING
*"     VALUE(NUMBER)
*"     VALUE(QUANTITY) LIKE  INRI-QUANTITY
*"     VALUE(RETURNCODE) LIKE  INRI-RETURNCODE
*"  EXCEPTIONS
*"      INTERVAL_NOT_FOUND
*"      NUMBER_RANGE_NOT_INTERN
*"      OBJECT_NOT_FOUND
*"      QUANTITY_IS_0
*"      QUANTITY_IS_NOT_1
*"      INTERVAL_OVERFLOW
*"      BUFFER_OVERFLOW
*"----------------------------------------------------------------------

  DATA: lv_exit(1) TYPE c,
        ls_nriv    TYPE nriv,
        ls_nkparms TYPE nkparms.

* read tnro for object, only if OBJECT is different from last object
  IF act_object = space OR act_object NE object.
    PERFORM read_tnro
            USING object.
  ENDIF.
* exceptions
  IF quantity = 0.
    MESSAGE e029 RAISING quantity_is_0.
  ENDIF.
  IF tnro-buffer = local AND quantity <> 1.
    MESSAGE e030 RAISING quantity_is_not_1.
  ENDIF.
  IF tnro-buffer = process AND quantity <> 1.
    MESSAGE e030 RAISING quantity_is_not_1.
  ENDIF.
  IF tnro-buffer = shadow AND quantity <> 1.
    MESSAGE e030 RAISING quantity_is_not_1.
  ENDIF.
* fill ls_nriv
  ls_nriv-object    = object.
  ls_nriv-subobject = subobject.
  ls_nriv-nrrangenr = nr_range_nr.
  ls_nriv-toyear    = toyear.
* main memory buffering and ignore buffer --> syslog
  IF ignore_buffer = 'X'.
    MOVE-CORRESPONDING ls_nriv TO ls_nkparms.
    CLEAR ls_nkparms-par_value.
    ls_nkparms-par_name  = 'SYS_IGNORE_BUFFER'.
    PERFORM syslog_write
            USING ls_nkparms
                  '1'
                  'IGNORE'.
  ENDIF.
* now all the errors and resetting are handled by the kernel
* no buffering or buffering should be ignored
  IF tnro-buffer = no OR ignore_buffer = 'X'.
    PERFORM read_nriv
            USING ls_nriv
                  quantity
                  returncode
                  number.
    RETURN.
  ENDIF.
* main memory buffering --------------------------------------------
  IF tnro-buffer = yes.
    PERFORM local_buffer
            USING ls_nriv
                  quantity
                  returncode
                  number
                  lv_exit.
    IF lv_exit = yes.
      RETURN.
    ELSE.
      PERFORM read_nriv
              USING ls_nriv
                    quantity
                    returncode
                    number.
    ENDIF.
  ENDIF.
* local buffering or local buffering with WP-Id --------------------
  IF ( tnro-buffer = local OR tnro-buffer = process ).
    PERFORM local_nriv
            USING ls_nriv
                  returncode
                  number.
  ENDIF.
* parallel buffering -----------------------------------------------
  IF tnro-buffer = shadow.
    PERFORM shadow_nriv
            USING    ls_nriv
                     ignore_buffer
                     tnro
            CHANGING returncode
                     number.
  ENDIF.
ENDFUNCTION.
