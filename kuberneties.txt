# install kubeadm
> nc 127.0.0.1 6443

# unistall kuberneties
> kubeadm reset
> apt-get purge kubeadm kubectl kubelet kubernetes-cni kube* 
> sudo apt-get autoremove

# start minikube
> minikube start --force
> kubectl version --client
> sudo apt install conntrack
> sudo minikube start --vm-driver=none

# get cluster information
> kubectl config view

# create deployment
> kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4
> kubectl get deployment
> kubectl delete deployment deploymentName

# get pods
> kubectl get pods

# expose cluster externally
> kubectl expose deployment hello-node --type=LoadBalancer --port=8080
> kubectl get services
> minikube service hello-node
> kubectl delete service serviceName

# namespace comands
> kubectl get namespaces
> kubectl get pods --namespace <namespace>
> kubectl create namespace <namespace>

 

> doctl auth init --context <NAME>
> doctl auth list
> doctl auth switch --context <NAME>
> doctl account get
> doctl serverless install
> doctl compute droplet create --region sfo2 --image ubuntu-18-04-x64 --size s-1vcpu-1gb <DROPLET-NAME>



> kubectl get namespaces
> kubectl create --namespace frontend
> kubectl config current-context
> kubectl config get-contexts
> kubectl config use-context <CONTEXT_NAME>
> kubectl logs <name> -n backend -f

# deploying springboot image
> mvn clean install 
> docker build -t claims-apis .
> docker build -t registry.digitalocean.com/lct-registry/claims-apis:202307061535 .
> docker tag claims-apis registry.digitalocean.com/lct-registry/claims-apis:202307061535
> docker push registry.digitalocean.com/lct-registry/claims-apis:202307061535
> digest: sha256:2fa9fd41a357b11b83a9ab42626502aa0d2ced761a0d6745e76b53d8f6c5a7f4 
> kubectl apply -f .\.k8_manifest\claims-deployment.yaml
> kubectl get pods -n backend -o wide
> kubectl exec -n backend utilities-54c9897fdb-dr66v -it -- /bin/sh