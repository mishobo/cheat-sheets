> kubectl get pods --all-namespaces

# creating token for joining nodes
> kubeadm token create --print-join-command
> kubeadm token list

# drain a k8s node
> kubectl drain <node_name> --ignore-daemonsets --force

# rejoin a drained node
> kubectl uncordon <node_name>

# upgrade k8s master
1. Drain control plane
2. Plan the upgrade
3. apply the upgrade
4. upgrade kubectl & kubelet on control plane node
5. uncordon the node

> kubectl get nodes
> kubectl drain k8s-master-node --ignore-daemonsets
> sudo apt-get install -y --allow-change-held-package kubeadm=1.21.1-00
> kubeadm version
> sudo kubeadm upgrade plan v1.21.1-00
> kubeadm upgrade apply v1.21.1-00
> sudo apt-get update
> sudo systemctl daemon-reload
> sudo systemctl restart kubelet
> kubectl get nodes
> kubectl uncordon k8s-master-node

# upgrade k8s worker
1. upgrade worker node
2. drain worker node
3. upgrade kubeadm
4. upgrade kubelet config
5. upgrade kubectl and kubelet
6. uncordon the node

> kubectl drain <node-to-drain> --ignore-daemonsets --force
> sudo apt-get update
> sudo apt-get install -y --allow-change-held-packages kubeadm=1.21.1-00
> kubeadm version
> sudo kubeadm upgrade node
> sudo apt-get update
> sudo apt-get install -y --allow-change-held-packages kubelet=1.21.1-00 kubectl=1.21.1-00
> sudo systemctl daemon-reload
> sudo systemctl restart kubelet
> kubectl get nodes
> kubectl uncordon <node-to-uncordon>

# creating a pod
> kubectl create -f pod.yml
> kubectl get pods
> kubectl get pods podName -o wide
> kubectl describe pods <podName>

# get into a pod
> kubectl exec node-test-pod -c nginx -- cat /etc/nginx/nginx.conf

# delete a pod/container
> kubectl delete pod <podName>

# creating k8s objects
> kubectl apply -f objectFile.yml
> kubectl get serviceaccounts -n development

# configMap object
> kubectl get configmaps
> kubectl describe configmap configName

# secret
> kubectl apply -f secret.yml
> kubectl get secrets
> kubectl describe secret secret-name

# unistall kuberneties
> kubeadm reset
> apt-get purge kubeadm kubectl kubelet kubernetes-cni kube* 
> sudo apt-get autoremove

# start minikube
> minikube start --force
> kubectl version --client
> sudo apt install conntrack
> sudo minikube start --vm-driver=none

# get cluster information
> kubectl config view

# create deployment
> kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4
> kubectl get deployment
> kubectl delete deployment deploymentName

# get pods
> kubectl get pods

# expose cluster externally
> kubectl expose deployment hello-node --type=LoadBalancer --port=8080
> kubectl get services
> minikube service hello-node
> kubectl delete service serviceName

# namespace comands
> kubectl get namespaces
> kubectl get pods --namespace <namespace>
> kubectl create namespace <namespace>

# configmap commands
> kubectl get configmaps
> kubectl describe configmap nginx-config-file

# Object Management
> kubectl apply -f file-name.yml
> kubectl delete -f file-name.yml

# service commands
> kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4
> kubectl expose deployment hello-node --type=LoadBalancer --port=8080
> kubectl get services


> doctl auth init --context <NAME>
> doctl auth list
> doctl auth switch --context <NAME>
> doctl account get
> doctl serverless install
> doctl compute droplet create --region sfo2 --image ubuntu-18-04-x64 --size s-1vcpu-1gb <DROPLET-NAME>



> kubectl get namespaces
> kubectl create namespace frontend
> kubectl config current-context
> kubectl config get-contexts
> kubectl config use-context <CONTEXT_NAME>
> kubectl logs <name> -n backend -f

# deploying springboot image
> mvn clean install 
> docker build -t claims-apis .
> docker build -t registry.digitalocean.com/lct-registry/claims-apis:202307061535 .
> docker tag claims-apis registry.digitalocean.com/lct-registry/claims-apis:202307061535
> docker push registry.digitalocean.com/lct-registry/claims-apis:202307061535
> digest: sha256:2fa9fd41a357b11b83a9ab42626502aa0d2ced761a0d6745e76b53d8f6c5a7f4 
> kubectl apply -f .\.k8_manifest\claims-deployment.yaml
> kubectl get pods -n backend -o wide
> kubectl exec -n backend utilities-54c9897fdb-dr66v -it -- /bin/sh

kubeadm join 146.190.42.205:6443 --token t6hsg4.gob178jgnoeucgck \
        --discovery-token-ca-cert-hash sha256:510ef40b2fd84f26f166796282286516d47693aafdd5743059bb9ee85b56e5fc


# my flow
> minikube status
> minikube start
> minikube stop
> minikube dashboard
> minikube version
> kubectl config view