# check docker version
> docker -v

# uninstall
> dpkg -l | grep -i docker
> sudo apt-get purge docker-ce docker-ce-cli containerd.io
> for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done

# installation
> sudo apt-get update
> sudo apt-get install ca-certificates curl gnupg

# spring profile
> ENTRYPOINT ["java", "-Dspring.profiles.active=local", "-jar", "/app.jar"]

# build docker image
> docker build -t reponame:00001 .

# run a container
> docker run -d -p 8081:80 --name webhost nginx
> docker run -d -p 80:80 --rm --name feedback feedback
> docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes

# bind mounts 
> docker run -d -p 82:82 -v  "/projects/devops/docker/nodejs-app-starting-setup:/app:ro"  --name startupapp startupapp 	

# copy a file into a container
> docker cp filepath containerName:/filedestination

# copy a file out of a container
> docker cp containerName:/filepath destination
> docker cp feedback:/app/feedback/walkingdead.txt  D:/projects/devops/docker/data-volumes-01-starting-setup/feedback/

# run react container with nginx
> docker run -d -p 8080:80 react-nginx

# container logs
> docker logs containerId
> docker logs -f containerId 
> docker logs my-app --tail 100

# list images
> docker images

# list all running and stopped containers
> docker ps -a
> docker container ls -a

# removing dangling images
> docker image prune
> docker ps -a -f status=exited

# push image to docker hub
> docker login
> docker tag imageName <username/repository:tag>

# removing unused containers, images, networks and the entire build cache
> docker system prune -a
> docker system prune --all --force --volumes


# running processes in a VM
> ps aux

# keycloak
> docker network create --attachable -d overlay lctlocalNet
> docker run -it -d -p 8080:8080 --network lctlocalNet -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:15.0.1
> docker run -it -d -p 8080:8080  -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:15.0.1
> docker exec -it xenodochial_jones /opt/jboss/keycloak/bin/add-user-keycloak.sh -u admin -p admin


# container shell access and viewing logs
> docker logs mysqldb
> docker exec -it mysqldb bash
> docker exec -it feedback /bin/sh

# inspect container
> docker inspect containerID 

# networking
> mongodb://host.docker.internal:27017/swfavorites

# get etho inet IP
> ifconfig

# check if docker swarm is running
> docker info

# initialize docker swarm
> docker swarm init
> docker swarm init --advertise-addr <IP>
> docker service create <image>

# get manager join-token
> docker swarm join-token manager

# check nodes in a swarm
> docker node ls

# remove a node from a swarm
> docker swarm leave --force || docker swarm leave -f 

# run multiple services in a stack
> docker stack deploy -c docker-compose.yml nginx_start

# list docker services running
> docker stack ls
> docker service ls
> docker stack services serviceName
> docker service logs serviceName

# scale up the services
> docker service update <servicename> -replicas <no. of services>

# remove a service
> docker service ls
> docker service update --repilcas=0
> docker service rm serviceName

# list replicas running in a container
> docker service ps <container name> 

# check docker networks
> docker network ls

# deploy the service in docker swarm
> docker stack deploy -c docker-compose.yml nginx_start
> docker service ps serviceName

# list stack services name
> docker stack services nginx_start

# upgrade/ add replicas a docker service
> docker service scale serviceName

# change service port
> docker service update --publish-rm 8080 --publish-add 9090:80 serviceName


# docker secrets
# create file dbpass.txt
> docker secret create db_password dbpass.txt
> echo "db_user" | docker secret create db_username -
> docker secret ls
> docker secret rm secretName









