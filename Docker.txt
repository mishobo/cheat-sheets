#ENTRYPOINT ["java", "-Dspring.profiles.active=local", "-jar", "/app.jar"]
#ENTRYPOINT ["java", "-Dspring.profiles.active=dev", "-jar", "/app.jar"]
# build docker image
> docker build -t reponame:00001 .

# run a container
> docker run -d -p 8081:80 --name webhost nginx

# container logs
> docker logs containerId
> docker logs containerId -f

# list images
> docker images

# list all running and stopped containers
> docker ps -a
> docker container ls -a

# removing dangling images
> docker image prune

# push image to docker hub
> docker login
> docker tag imageName <username/repository:tag>

# removing unused containers, images, networks and the entire build cache
> docker system prune -a



# running processes in a VM
> ps aux

# keycloak
> docker network create --attachable -d overlay lctlocalNet
> docker run -it -d -p 8080:8080 --network lctlocalNet -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:15.0.1
> docker run -it -d -p 8080:8080  -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:15.0.1

# 
> docker exec -it xenodochial_jones /opt/jboss/keycloak/bin/add-user-keycloak.sh -u admin -p admin


# container shell access and viewing logs
> docker logs mysqldb
> docker exec -it mysqldb bash

# inspect container
> docker inspect containerID 

# get etho inet IP
> ifconfig

# initialize docker swarm
> docker swarm init
> docker swarm init --advertise-addr <IP>
> docker service create <image>

# list docker services running
> docker service ls
> docker service logs serviceName

# scale up the services
> docker service update <servicename> -replicas <no. of services>

# remove a service
> docker service rm serviceName

# list replicas running in a container
> docker service ps <container name> 


# check nodes in a swarm
> docker node ls

# check docker networks
> docker network ls

# deploy the service in docker swarm
> docker stack deploy -c docker-compose.yml nginx_start
> docker service ps serviceName

# list stack services name
> docker stack services nginx_start

# upgrade/ add replicas a docker service
> docker service scale serviceName

# change service port
> docker service update --publish-rm 8080 --publish-add 9090:80 serviceName

# docker secrets
- create file dbpass.txt
> docker secret create db_password dbpass.txt
> echo "db_user" | docker secret create db_username -
> docker secret ls
> docker secret rm secretName







